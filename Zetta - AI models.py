import json

import aiohttp
from .. import loader, utils
from telethon import events

available_models = {
    "1": "gpt-4o",
    "2": "Command-R+",
    "3": "gpt-4o-mini",
    "4": "gemini",
    "5": "llama-3.1",
    "6": "copilot",
    "7": "qwen",
    "8": "claude-3-haiku",
    "9": "claude-3.5-sonnet"
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–µ–π
PERSONAS_FILE = "personas.json"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_personas():
    try:
        with open(PERSONAS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª
def save_personas(personas):
    with open(PERSONAS_FILE, "w", encoding="utf-8") as f:
        json.dump(personas, f, indent=4)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
personas = load_personas()


@loader.tds
class AIModule(loader.Module):
    """
    üß† –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò. 
    >>–º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Zetta - AI models<<

    –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
     - **–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:** `.ai <–∑–∞–ø—Ä–æ—Å>` - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.
     - **–ß–∞—Ç:** `.chat` - –¥–∏–∞–ª–æ–≥ —Å –ò–ò, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã.
    """
    strings = {"name": "Zetta - AI models"}

    def __init__(self):
        super().__init__()
        self.default_model = "gpt-4o-mini"
        self.active_chats = {}
        self.chat_history = {}
        self.chat_archive = {}
        self.role = {}
        self.response_mode = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("AIModule", "active_chats", {})
        self.chat_history = self.db.get("AIModule", "chat_history", {})
        self.chat_archive = self.db.get("AIModule", "chat_archive", {})
        self.role = self.db.get("AIModule", "role", {})
        self.response_mode = self.db.get("AIModule", "response_mode", {})

    @loader.unrestricted
    async def modelcmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.model <–Ω–æ–º–µ—Ä>` –∏–ª–∏ `.model list` –¥–ª—è —Å–ø–∏—Å–∫–∞.
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.</b>")
            return

        if args == "list":
            model_list = "\n".join([f"<b>{k}.</b> {v}" for k, v in available_models.items()])
            await message.edit(f"üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{model_list}")
            return

        if args not in available_models:
            await message.edit("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏.</b>")
            return

        self.default_model = available_models[args]
        await message.edit(f"‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:</b> {self.default_model}")

    @loader.unrestricted
    async def chatcmd(self, message):
        """
        –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.chat`
        """
        chat_id = str(message.chat_id)
        if self.active_chats.get(chat_id):
            self.active_chats.pop(chat_id, None)
            self.db.set("AIModule", "active_chats", self.active_chats)

            if chat_id in self.chat_history:
                self.chat_archive[chat_id] = self.chat_history[chat_id]
                self.chat_history.pop(chat_id, None)
                self.db.set("AIModule", "chat_history", self.chat_history)
                self.db.set("AIModule", "chat_archive", self.chat_archive)
                await message.edit("üì¥ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</b>")
            else:
                await message.edit("üì¥ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.</b>")
        else:
            self.active_chats[chat_id] = True
            self.db.set("AIModule", "active_chats", self.active_chats)

            if chat_id in self.chat_archive:
                self.chat_history[chat_id] = self.chat_archive[chat_id]
                self.chat_archive.pop(chat_id, None)
                self.db.set("AIModule", "chat_history", self.chat_history)
                self.db.set("AIModule", "chat_archive", self.chat_archive)
                await message.edit("üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.</b>")
            else:
                await message.edit("üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.</b>")

    @loader.unrestricted
    async def clearcmd(self, message):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.clear`
        """
        chat_id = str(message.chat_id)
        if chat_id in self.chat_history or chat_id in self.chat_archive:
            self.chat_history.pop(chat_id, None)
            self.chat_archive.pop(chat_id, None)
            self.db.set("AIModule", "chat_history", self.chat_history)
            self.db.set("AIModule", "chat_archive", self.chat_archive)
            await message.edit("üóëÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.</b>")
        else:
            await message.edit("üì≠Ô∏è <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.</b>")

    @loader.unrestricted
    async def rolecmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –ò–ò –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.role <—Ä–æ–ª—å>`
        """
        chat_id = str(message.chat_id)
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("üé≠ <b>–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ò–ò.</b>")
            return

        self.role[chat_id] = args
        self.db.set("AIModule", "role", self.role)
        await message.edit(f"üé≠ <b>–†–æ–ª—å –ò–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {args}")

    @loader.unrestricted
    async def modecmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ò–ò.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.mode <reply/all>`
        """
        chat_id = str(message.chat_id)
        args = utils.get_args_raw(message)
        if not args or args not in ("reply", "all"):
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: reply –∏–ª–∏ all.</b>")
            return

        self.response_mode[chat_id] = args
        self.db.set("AIModule", "response_mode", self.response_mode)
        await message.edit(f"‚úÖ <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> {args}")

    @loader.unrestricted
    async def createpersonacmd(self, message):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.createpersona <–∏–º—è> <—Ä–æ–ª—å>`
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ä–æ–ª—å –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏.</b>")
            return

        try:
            name, role = args.split(" ", 1)
        except ValueError:
            await message.edit("ü§î <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .createpersona <–∏–º—è> <—Ä–æ–ª—å></b>")
            return

        # –ò–∑–º–µ–Ω–µ–Ω–æ: chat_id –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ 'global'
        if 'global' not in personas:
            personas['global'] = {}
        personas['global'][name] = role
        save_personas(personas)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        await message.edit(f"‚úÖ <b>–õ–∏—á–Ω–æ—Å—Ç—å {name} —Å–æ–∑–¥–∞–Ω–∞.</b>")

    @loader.unrestricted
    async def personascmd(self, message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–µ–π.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.personas`
        """
        # –ò–∑–º–µ–Ω–µ–Ω–æ: chat_id –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ 'global'
        if 'global' not in personas or not personas['global']:
            await message.edit("ü§î <b>–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–µ–π –ø—É—Å—Ç.</b>")
            return

        persona_list = "\n".join([f"<b>{name}:</b> {role}" for name, role in personas['global'].items()])
        await message.edit(f"üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏:</b>\n{persona_list}")

    @loader.unrestricted
    async def switchpersonacmd(self, message):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.switchpersona <–∏–º—è>`
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏.</b>")
            return

        # –ò–∑–º–µ–Ω–µ–Ω–æ: chat_id –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ 'global'
        if 'global' not in personas or args not in personas['global']:
            await message.edit("üö´ <b>–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")
            return

        chat_id = str(message.chat_id)
        self.role[chat_id] = personas['global'][args]
        await message.edit(f"‚úÖ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å:</b> {args}")

    @loader.unrestricted
    async def deletepersonacmd(self, message):
        """
        –£–¥–∞–ª—è–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.deletepersona <–∏–º—è>`
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏.</b>")
            return

        # –ò–∑–º–µ–Ω–µ–Ω–æ: chat_id –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ 'global'
        if 'global' not in personas or args not in personas['global']:
            await message.edit("üö´ <b>–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")
            return

        del personas['global'][args]
        save_personas(personas)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        await message.edit(f"‚úÖ <b>–õ–∏—á–Ω–æ—Å—Ç—å {args} —É–¥–∞–ª–µ–Ω–∞.</b>")

    @loader.unrestricted
    async def aicmd(self, message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.ai <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.ai`
        """
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)

        if reply:
            request_text = reply.raw_text
        elif args:
            request_text = args
        else:
            await message.edit("ü§î <b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>")
            return

        await self.process_request(message, request_text)

    async def process_request(self, message, request_text):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò.
        """
        api_url = "http://api.onlysq.ru/ai/v2"
        chat_id = str(message.chat_id)

        payload = {
            "model": self.default_model,
            "request": {
                "messages": [
                    {
                        "role": "user",
                        "content": request_text
                    }
                ]
            }
        }

        try:
            await message.edit("ü§î <b>–î—É–º–∞—é...</b>")

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ <b>–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.</b>").strip()

                    formatted_answer = f"‚ùî <b>–ó–∞–ø—Ä–æ—Å:</b>\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}"
                    await message.edit(formatted_answer)

        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}\n\nüí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.</b>")

    @loader.unrestricted
    async def watcher(self, message):
        """
        –°–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞.
        """
        chat_id = str(message.chat_id)
        if self.active_chats.get(chat_id):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞
            if self.response_mode.get(chat_id, "all") == "reply" and not message.is_reply:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–∂–∏–º "reply" –∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            if message.text:
                question = message.text.strip()
                user_name = await self.get_user_name(message)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫ –∑–∞–ø—Ä–æ—Å—É, —Å–æ—Ö—Ä–∞–Ω—è—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                await self.respond_to_message(message, user_name, question)

    async def get_user_name(self, message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        if message.sender:
            user = await self.client.get_entity(message.sender_id)
            return user.first_name or user.username
        else:
            return "–ê–Ω–æ–Ω–∏–º"  # –ò–ª–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def respond_to_message(self, message, user_name, question):  # –ò–∑–º–µ–Ω–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç user_name
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏.
        """
        chat_id = str(message.chat_id)

        if chat_id not in self.chat_history:
            self.chat_history[chat_id] = []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.chat_history[chat_id].append({
            "role": "user",
            "content": f"{user_name} –Ω–∞–ø–∏—Å–∞–ª: {question}"
        })

        if len(self.chat_history[chat_id]) > 1000:
            self.chat_history[chat_id] = self.chat_history[chat_id][-1000:]

        api_url = "http://api.onlysq.ru/ai/v2"

        payload = {
            "model": self.default_model,
            "request": {
                "messages": [
                    {"role": "system", "content": self.role.get(chat_id, "")}
                ] + self.chat_history[chat_id]
            }
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ <b>–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.</b>").strip()

                    self.chat_history[chat_id].append({
                        "role": "assistant",
                        "content": answer
                    })
                    self.db.set("AIModule", "chat_history", self.chat_history)

                    await message.respond(f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}")

        except aiohttp.ClientError as e:
            await message.respond(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}\n\nüí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.</b>")

    @loader.unrestricted
    async def moduleinfocmd(self, message):  # Changed command name
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
        """
        info_text = """
         <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>

<b>–ê–≤—Ç–æ—Ä:</b> VAWEIRR

<b>–º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Zetta - AI models.</b>
–ò –≤–µ—Å—å –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–µ–≥–æ –±–æ—Ç–∞: @gpt4o_freetouse_bot

        """
        await message.edit(info_text)
