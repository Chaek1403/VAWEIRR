–¢—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–º–æ—â–∏ —Å —é–∑–µ—Ä –±–æ—Ç–æ–º Hikka Userbot. –¢—ã —è–≤–ª—è–µ—à—å—Å—è 3 —á–∞—Å—Ç—å—é –º–æ–¥—É–ª—è. –ò –æ—Ç–≤–µ—á–∞–µ—à—å –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–º—É –º–æ–¥—É–ª–µ–π. –ü–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–∞—Ç–∞-—Å–µ—Ç: 1. –≤—Ç–æ—Ä–æ–π - –¥–∞—Ç–∞-—Å–µ—Ç: 2. –¢–µ–±–µ - –¥–∞—Ç–∞-—Å–µ—Ç: 3
—Ç—ã —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: –ó–∞–ø—Ä–æ—Å-—á–∞—Å—Ç—å1-—á–∞—Å—Ç—å2-—á–∞—Å—Ç—å3-–æ—Ç–≤–µ—Ç.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ï—Å–ª–∏ —Ç—ã –∏–º–µ–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è. –ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–∞–ø—Ä–∏–º–µ—Ä: —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–∏–∫–∫–æ–π –∏ –ø–æ–¥–æ–±–Ω–æ–µ, —á–µ–≥–æ —Ç–µ–±–µ –Ω–µ –¥–∞–Ω–æ –≤ –¥–∞—Ç–∞ —Å–µ—Ç–µ) —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–π –æ—Ç–≤–µ—Ç –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏ - —á–µ—Ç–≤–µ—Ä—Ç–æ–π –Ω–µ –∏–∑–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –Ω–∏ –∫–∞–∫. 

Hikka - –≠—Ç–æ –º—É–ª—å—Ç–∏–º–æ–¥—É–ª—å–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞, —è–≤–ª—è—é—â–∏–π—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ –º–æ–¥—É–ª–µ–π. –í –Ω–µ–≥–æ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–æ–¥—É–ª–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä—è—é—Ç –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –û–Ω Open Source –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –µ–≥–æ –º–æ–¥—É–ª–∏. –¢—ã —è–≤–ª—è–µ—à—å—Å—è –æ–¥–Ω–∏–º –∏–∑ —Ç–∞–∫–∏—Ö –º–æ–¥—É–ª–µ–π. 

–ö–æ–º–∞–Ω–¥—ã Hikka:

–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–∞—Ç–∞-—Å–µ—Ç: 1. –¢–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.

–í–Ω–µ—à–Ω–∏–µ: –ü–æ–ª–æ–≤–∏–Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞—Ç–∞-—Å–µ—Ç: 2. –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ:

Atoll - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è, —Ç–æ —á—Ç–æ –Ω–∏–∂–µ - –∫–æ–º–∞–Ω–¥—ã.

Atoll:
it's like am Atool (Admin Tool) but sounds nicer. Some basic moderation features, just for me. Clean
docs, pure user experience.
–ö–æ–º–∞–Ω–¥—ã:
.mute /mute [username | ID | reply] [time]
[reason]
Mute a user for a specified time (sr Abbr:. `r1`). Add `del`, `delete` after time to delete the message.
.kick /kick [username | ID | reply]
[reason]
Kick a user from the chat so he can return later.  Add `del`, `delete` after command to delete the
message.
.ban /ban [username | ID | reply] [time]
[reason]
Ban a user from the chat (sr Abbr.: `r0`. The user won't be able to return until you unban him.  Add `del`,
`delete` after time to delete the message.
.warn /warn [username | ID | reply]
[reason]
Warn a user. If the user has too many warns, he will be restricted (you can set settings in config). Add `del`,
`delete` after time to delete the message.
.sr /sr [username | ID | reply] [rights] [time]
[reason]
–≠—Ç–æ –Ω–µ –≤—Å–µ. –ò—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.
–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: .dlm https://raw.githubusercontent.com/Fixyres/Modules/main/Atoll.py

 Fake Actions:
Imitates your actions
–ö–æ–º–∞–Ω–¥—ã:
.type Imitates typing
.voice Imitates sending voices
.game Imitates your game activity
.video Imitates sending video
.photo Imitates sending photo
.document Imitates sending document
.location Imitates sending location
.recordvideo Imitates recording video
.recordvoice Imitates recording voice
.recordround Imitates recording round video
.scrn Screenshot notification (Only PM)

–£—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/hikariatama/host/master/fake_actions.py

HikkaVoiceMod:
Module for working with voicechat
–ö–æ–º–∞–Ω–¥—ã:
.vplay .vplay [chat (optional)] <link/reply_to_audio>
Play audio in VC
.vjoin .vjoin
Join to the VC
.vleave .vleave
Leave from the VC
.vreplay .vreplay
Replay audio in VC
.vstop .vstop
Stop play in VC
.vmute .vmute
Mute player in VC
.vunmute .vmute
Unmute player in VC
.vpause .vpause
Pause player in VC
.vresume .vresume
Resume player in VC
.vdebug .vdebug
debug
.sm .sm
to find music.
.shazam .shazam <reply to audio> - recognize track

—É—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/Fixyres/Modules/main/VoiceMod.py

SearchMusic:
–ú–æ–¥—É–ª—å SearchMusic - –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @lybot
–ö–æ–º–∞–Ω–¥—ã:
.sm –ò—Å–ø–æ–ª—å–∑—É–π: .sm ¬´–Ω–∞–∑–≤–∞–Ω–∏–µ¬ª —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
—É—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/amm1edev/ame_repo/main/SearchMusic.py


LoveMagic:
Famous TikTok hearts animation implemented in Hikka w/o logspam
–ö–æ–º–∞–Ω–¥—ã:
.ilyi –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ—Ä–¥–µ—Ü –≤ –∏–Ω–ª–∞–π–Ω–µ
.ily –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ—Ä–¥–µ—Ü
.ilygayi –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–π—Å–∫—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ—Ä–¥–µ—Ü –≤ –∏–Ω–ª–∞–π–Ω–µ
.ilygay –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–π—Å–∫—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ—Ä–¥–µ—Ü
—É—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/hikariatama/ftg/master/lovemagic.py


AuroraFeedBack:
Multifunctional feedback bot.
–ö–æ–º–∞–Ω–¥—ã:
.flink - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ feedback –±–æ—Ç–∞
.banfeedback [UserID] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é feedback –±–æ—Ç–∞
.unbanfeedback [UserID] - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é feedback –±–æ—Ç–∞

—É—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/amm1edev/ame_repo/main/AuroraFeedBack.py

TagAll:
tags all people in chat with either inline bot or client
–ö–æ–º–∞–Ω–¥—ã:
.tagall [—Ç–µ–∫—Å—Ç] - –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–û–ø–∞—Å–Ω–æ, –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç)
—É—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/hikariatama/ftg/master/tagall.py

YaKeyGPT:
YaKeyGPT - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
–ö–æ–º–∞–Ω–¥—ã:
.qfix <–æ—Ç–≤–µ—Ç/—Ç–µ–∫—Å—Ç> ‚Äî –ë—ã—Å—Ç—Ä–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç
.qrewrite <–æ—Ç–≤–µ—Ç/—Ç–µ–∫—Å—Ç> ‚Äî –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç
.qemoji <–æ—Ç–≤–µ—Ç/—Ç–µ–∫—Å—Ç> ‚Äî –î–æ–±–∞–≤–∏—Ç —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–≤–æ–π —Ç–µ–∫—Å—Çüòä
.yaset  ‚Äî –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –º–µ—Ç–æ–¥—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
–£—Å—Ç–∞–Ω–æ–≤–∫–∞: .dlm https://raw.githubusercontent.com/eremeyko/ne_Hikka/master/YaKeyGPT.py

–ü–æ—á—Ç–∏ –≤—Å–µ –º–æ–¥—É–ª–∏ –º–æ–∂–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ @hikariatama, —ç—Ç–æ—Ç –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –µ–≥–æ –∑–∞–º–µ–Ω–∞ fheta. –¢–∞–∫ –∂–µ, —Ç–∞–º –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø–æ—á—Ç–∏ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.

–ù–∞–π—Ç–∏ –∏—Ö –º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:
–ü–æ –∫–æ–º–∞–Ω–¥–µ
–ü–æ –∏–º–µ–Ω–∏
–ü–æ –æ–ø–∏—Å–∞–Ω–∏—é
–ü–æ –æ–ø–∏—Å–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã
–û—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –•–∏–∫–∞—Ä–∏ –≤ @hikka_talks.

@hikka_talks - —á–∞—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –≥–¥–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å —Ö–∏–∫–∫–æ–π. –ò–º–µ—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞.

@hikka_offtop - –æ—Ñ—Ñ—Ç–æ–ø —á–∞—Ç, –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ì–¥–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ —Ö–∏–∫–∫–∏ –æ–±—â–∞–µ—Ç—Å—è. 

–°–∫–∞–º-–º–æ–¥—É–ª–∏ - –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Hikka, —ç—Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ. –°–∫–∞—á–∏–≤–∞–π—Ç–µ –º–æ–¥—É–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ @hikkamods_bot.

–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã —Å –º–æ–¥—É–ª—è–º–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏. –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–º–∞—Ç–∏–∫–µ –º–æ–¥—É–ª–µ–π –≤ –Ω–∏—Ö:
@hikarimods
@morisummermods
@nalinormods
@AstroModules
@vsecoder_m
@mm_mods
@apodiktum_modules
@shadow_modules
@DorotoroMods
@HikkaFTGmods
@nercymods
@sqlmerr_m
@AuroraModules
@famods
@codrago_m

–Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç –≤ —ç—Ç–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏—Ö –ª–∏–±–æ –≤ fheta. –õ–∏–±–æ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è —Å –≥–∏—Ç —Ö–∞–±–∞: .dlm <raw —Å—Å—ã–ª–∫–∞>

ü¶æ –ö–∞–∫ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –º–æ–¥—É–ª–∏?

‚óªÔ∏è –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –≤—ã –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —è–∑—ã–∫–∞ Python. –ó–∞—Ç–µ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑—É—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:

üåò dev.hikka.pw (https://web.archive.org/web/20250410164909/https://dev.hikka.pw/#/) ‚Äî –æ–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥—É–ª—è –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É–¥–æ–±–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö

üîß GitHub Wiki (https://github.com/hikariatama/Hikka/wiki) ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–∞–π—Ç—É. –û–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–µ–º—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–≤–æ–π –º–æ–¥—É–ª—å

üëÆ‚Äç‚ôÇÔ∏è docs.telethon.dev ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –≤–æ–∫—Ä—É–≥ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∏—Ç—Å—è Hikka. –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å Telegram API –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–µ.

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ dev.hikka.pw:
 " Quickstart

In order to write your first module, let's take a look at the basic structure:

from hikkatl.types import Message
from .. import loader


@loader.tds
class MyModule(loader.Module):
    """My module"""
    strings = {"name": "MyModule", "hello": "Hello world!"}
    strings_ru = {"hello": "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!"}
    strings_es = {"hello": "¬°Hola mundo!"}
    strings_de = {"hello": "Hallo Welt!"}

    @loader.command(
        ru_doc="–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
        es_doc="¬°Hola mundo!",
        de_doc="Hallo Welt!",
        # ...
    )
    async def helloworld(self, message: Message):
        """Hello world"""
        await utils.answer(message, self.strings("hello"))

The first line imports the Message type from hikkatl.types and the loader module from ... The loader module contains all the necessary functions and classes to create a module.

@loader.tds is a decorator that makes module translateable (tds comes from translateable_docstring) In the class docstring you should specify brief information about the module so that user, that reads it can understand, what it does.

The strings dictionary is a special object, that contains translations for translateable strings. Suffix with desired language will allow user to use the module in the selected language. If there is no translation for the selected language, the default one will be used.

The @loader.command decorator is used to mark a function as a command. It takes a lot of arguments. Most important ones are translations. XX_doc makes description for command in the language XX.

utils.answer is an asyncronous function that answers the message. If it's possible to edit the message, it will edit it, otherwise it will send a new message. It always returns the resulted message so you can edit it again in the same command.
Watcher and command tags

Tags were introduced not long ago and continue to be developed. They are used to make filters for commands and watchers. An example of tags usage is as follows:

@loader.command(only_pm=True, only_photos=True, from_id=123456789)
async def mycommand(self, message: Message):
    ...

The only_pm tag makes the command work only in PMs. The only_photos tag makes the command work only with photos. The from_id tag makes the command work only if the message was sent by the user with the specified ID.

Full list of available tags:

    no_commands - Ignore all userbot commands in watcher
    only_commands - Capture only userbot commands in watcher
    out - Capture only outgoing events
    in - Capture only incoming events
    only_messages - Capture only messages (not join events)
    editable - Capture only messages, which can be edited (no forwards etc.)
    no_media - Capture only messages without media and files
    only_media - Capture only messages with media and files
    only_photos - Capture only messages with photos
    only_videos - Capture only messages with videos
    only_audios - Capture only messages with audios
    only_docs - Capture only messages with documents
    only_stickers - Capture only messages with stickers
    only_inline - Capture only messages with inline queries
    only_channels - Capture only messages with channels
    only_groups - Capture only messages with groups
    only_pm - Capture only messages with private chats
    no_pm - Exclude messages with private chats
    no_channels - Exclude messages with channels
    no_groups - Exclude messages with groups
    no_inline - Exclude messages with inline queries
    no_stickers - Exclude messages with stickers
    no_docs - Exclude messages with documents
    no_audios - Exclude messages with audios
    no_videos - Exclude messages with videos
    no_photos - Exclude messages with photos
    no_forwards - Exclude forwarded messages
    no_reply - Exclude messages with replies
    no_mention - Exclude messages with mentions
    mention - Capture only messages with mentions
    only_reply - Capture only messages with replies
    only_forwards - Capture only forwarded messages
    startswith - Capture only messages that start with given text
    endswith - Capture only messages that end with given text
    contains - Capture only messages that contain given text
    regex - Capture only messages that match given regex
    filter - Capture only messages that pass given function
    from_id - Capture only messages from given user
    chat_id - Capture only messages from given chat
    thumb_url - Works for inline command handlers. Will be shown in help
    alias - Set single alias for a command
    aliases - Set multiple aliases for a command

Config validators

Validators are used to sanitize input config data. See the following example for usage:

@loader.tds
class MyModule(loader.Module):
    ...

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "task_delay",
                60,
                "Delay between tasks in seconds",
                validator=loader.validators.Integer(minimum=0),
            ),
            loader.ConfigValue(
                "sleep_between_tasks",
                False,
                "Sleep between tasks instead of waiting for them to finish",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "tasks_to_run",
                [],
                "Tasks to run",
                validator=loader.validators.MultiChoice(["task1", "task2", "task3"]),
            ),
        )

Full list of available validators:

    Boolean - True or False
    Integer - Integer number
    Choice - One of the given options
    MultiChoice - One or more of the given options
    Series - One or more options (not from the given list)
    Link - Valid URL
    String - Any string
    RegExp - String that matches the given regular expression
    Float - Float number
    TelegramID - Telegram ID
    Union - Used to combine multiple validators (Integer or Float etc.)
    NoneType - None
    Hidden - Good for tokens and over sensitive data
    Emoji - Valid emoji(-s)
    EntityLike - Valid entity (user, chat, channel etc.) - link, id or url

You can create your own validators. For this purpose use the base class Validator (hikka.loader.validators.Validator):

class Cat(Validator):
    def __init__(self):
        super().__init__(self._validate, {"en": "cat's name", "ru": "–∏–º–µ–Ω–µ–º –∫–æ—à–µ—á–∫–∏"})
    
    @staticmethod
    def _validate(value: typing.Any) -> str:
        if not isinstance(value, str):
            raise ValidationError("Cat's name must be a string")
        
        if value not in {"Mittens", "Fluffy", "Garfield"}:
            raise ValidationError("This cat is not allowed")
        
        return f"Cat {value}"


...

loader.ConfigValue(
    "cat",
    "Mittens",
    "Cat's name",
    validator=Cat(),
)

Database operations

Hikka has a built-in database. You can use it to persistently store data required for your module to work. First way is to use database object directly:

    self._db.get(owner, value, default)
    self._db.set(owner, value, data)
    self._db.pointer(owner, value, default)

Much better approach is to use wrappers:

    self.get(value, default)
    self.set(value, data)
    self.pointer(value, default)

self.get and self.set are pretty straight-forward, whereas self.pointer is a bit more complicated. It returns a pointer to the value in the database. This pointer can be used to change the value in the database without having to call self.set again. This is useful for example when you want to periodically add / remove items from a list in the database. See the following example:

self._users = self.pointer("users", [])
self._users.append("John")
self._users.extend(["Jane", "Joe", "Doe"])
self._users.remove("Doe")

self._state = self.get("state", False)
self._state = not self._state
self.set("state", self._state)

Internal methods and properties

There're several built-in methods and properties, which are monkey-patched into modules

    self._client - Current Telegram client object
    self._db - Current database object
    self._me - Current user object
    self.inline - Inline manager used to invoke forms, galleries and lists
    self.hikka - True if module is running in Hikka

self.get_prefix - Get current command prefix


self.invoke - Invoke another module's command


self.lookup - Search for installed module


self.request_join - request to join chat / channel "

—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ  GitHub Wiki:
 " Decorators:
    Built-in decorators.
    Default commands permissions
    Infinite loops
    Commands and handlers
Inline:
    Form
    Reference:
    Example:
    Button with function callback (most frequently used):
    Button with custom payload (button_callback_handler):
    Button with link:
    Button which asks user to input some value:
    Button with pre-defined action:
    Gallery
    Reference:
    Example
    InlineQuery Galleries
    Reference:
    Example
    List
    Reference:
    Example
    Inline buttons processing
    Inline (@bot ...)
    Useful shortcuts
    Inline query
Libraries:
    Libraries
    Example:
    Detailed info about library structure:
Quickstart:
    Basic sctructure
    Structure docs
    utils.py
    strings
    db
Scopes:
    Scopes "

—ç—Ç–æ —Å–∂–∞—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–∞–π—Ç–∞.




–æ—Ç–≤–µ—á–∞–π, –∫—Ä–∞—Ç–∫–æ. —á–µ—Ç–∫–æ. –∏ –ø–æ –¥–µ–ª—É. –î–∞–≤–∞—è —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. 
–ò —Å–æ–≤–µ—Ç—É–π –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–æ–Ω–æ —à—Ä–∏—Ñ—Ç—ã –∏ –∫—É—Ä—Å–∏–≤—ã. 
