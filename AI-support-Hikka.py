import json

import aiohttp
from .. import loader, utils
from telethon import events
import requests  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º requests

@loader.tds
class AIsupport(loader.Module):
    """
    AI - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Hikka.
    """
    strings = {"name": "AI-sup Hikka"}

    def __init__(self):
        super().__init__()
        self.default_model = "gpt-4o-mini"
        self.instructions = self.get_instructions()
        self.error_instructions = self.get_error_instructions()

    @loader.unrestricted
    async def aisupcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aisup <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aisup`
        """
        r = True
        await self.process_request(message, self.instructions, r)
       

    @loader.unrestricted
    async def aierrorcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –æ–± –æ—à–∏–±–∫–µ –º–æ–¥—É–ª—è.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aierror <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aierror`
        """
        r = False
        await self.process_request(message, self.error_instructions, r)

    def get_instructions(self):  # –î–æ–±–∞–≤–ª—è–µ–º self
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/instruction.txt'
        response = requests.get(url)
        return response.text

    def get_error_instructions(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/error_instruction.txt'
        response = requests.get(url)
        return response.text

    async def process_request(self, message, instructions, r):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò.
        """
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
    
        if reply:
            request_text = reply.raw_text
        elif args:
            request_text = args
        else:
            await message.edit("ü§î –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
    
        api_url = "http://api.onlysq.ru/ai/v2"
        chat_id = str(message.chat_id)
    
        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "system",
                        "content": instructions  # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.instructions
                    },
                    {
                        "role": "user",
                        "content": request_text
                    }
                ]
            }
        }
    
        try:
            await message.edit("<b>ü§î –î—É–º–∞—é...</b>")
    
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
    
                    
                    command = r
                    if command == False:
                        formatted_answer = f"üí°<b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka | –°–ø–µ—Ü. –ü–æ –æ—à–∏–±–∫–∞–º</b>:\n{answer}"
                    else:
                        formatted_answer = f"‚ùî –ó–∞–ø—Ä–æ—Å:\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka</b>:\n{answer}"
    
                    await message.edit(formatted_answer)
    
        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")
      
