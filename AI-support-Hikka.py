import json

import aiohttp
from .. import loader, utils
from telethon import events
import requests  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º requests

@loader.tds
class AIsupport(loader.Module):
    """
    AI - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Hikka.
    ‚ö†Ô∏è–ù–µ –ø–æ–º–æ–∂–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ö–∏–∫–∫–∏, –∏–ª–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –º–æ–¥—É–ª—è–º–∏.
    """
    strings = {"name": "AI-sup Hikka"}

    def __init__(self):
        super().__init__()
        self.default_model = "gpt-4o-mini"
        self.instructions = self.get_instructions()  # –í—ã–∑—ã–≤–∞–µ–º get_instructions() –∑–¥–µ—Å—å

    @loader.unrestricted
    async def aisupcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aisup <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aisup`
        """
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)

        if reply:
            request_text = reply.raw_text
        elif args:
            request_text = args
        else:
            await message.edit("ü§î <b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>")
            return

        await self.process_request(message, request_text)

    def get_instructions(self):  # –î–æ–±–∞–≤–ª—è–µ–º self
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/instruction.txt'
        response = requests.get(url)
        return response.text

    async def process_request(self, message, request_text):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò.
        """
        api_url = "http://api.onlysq.ru/ai/v2"
        chat_id = str(message.chat_id)

        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "system",
                        "content": self.instructions  # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.instructions
                    },
                    {
                        "role": "user",
                        "content": request_text
                    }
                ]
            }
        }

        try:
            await message.edit("ü§î <b>–î—É–º–∞—é...</b>")

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ <b>–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.</b>").strip()

                    formatted_answer = f"‚ùî <b>–ó–∞–ø—Ä–æ—Å:</b>\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}"
                    await message.edit(formatted_answer)

        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}\n\nüí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.</b>")
